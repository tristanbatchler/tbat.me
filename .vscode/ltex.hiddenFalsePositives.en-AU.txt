{"rule":"TOO_LONG_SENTENCE","sentence":"^\\QThis tutorial series assumes you are comfortable with Python, and have a very basic knowledge of Godot (i.e., you have familiarised yourself with the basic layout of the softwareâ€”just search for a Godot introduction video if you need to).\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_AU","sentence":"^\\QI chose Autobahn Twisted because it supports the WebSocket protocol, which is what we need to use if we are to export the game for the web.\\E$"}
{"rule":"PUNCTUATION_PARAGRAPH_END","sentence":"^\\QGodot's extensive export options\\E$"}
{"rule":"TOO_LONG_SENTENCE","sentence":"^\\QOpen a terminal (if you are using Windows, make sure it is PowerShell and not CMD) in the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q folder and run the following commands (note you may need to use \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q rather than \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q especially if you are running a Unix-based OS):\\E$"}
{"rule":"POSSESSIVE_APOSTROPHE","sentence":"^\\QTip for the lazy\nAt this point, if you don't want to go through all the code, visit the Releases section of the official GitHub repository.\\E$"}
{"rule":"PUNCTUATION_PARAGRAPH_END","sentence":"^\\QRelease v0.0 assets\\E$"}
{"rule":"YOUR","sentence":"^\\QYou'll have to unzip the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q file, copy the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q folders, and paste them into your project directory (your existing \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q folder should be kept).\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qsection.\\E$"}
{"rule":"MASS_AGREEMENT","sentence":"^\\QThe protocol\nCreate a new file inside your \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q folder called \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"PUNCTUATION_PARAGRAPH_END","sentence":"^\\QYour project structure should look like this now:\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+$"}
{"rule":"TOO_LONG_SENTENCE","sentence":"^\\QI also wanted all protocols to process packets from their queue 20 times per second, so I create a looping call to fire the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q function every twentieth of a second (which, in turn, tells all protocols to fire their own \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q function and process all their packets).\\E$"}
{"rule":"COMMA_COMPOUND_SENTENCE","sentence":"^\\QClick on Create Folder and it will create a folder called client, and it should be sitting right next to your server folder in your main project folder.\\E$"}
{"rule":"SOME_OF_THE","sentence":"^\\QIf you got errors, or didn't see some of the expected output, I would recommend checking the Debugger tab of the bottom panel in Godot's editor for clues.\\E$"}
{"rule":"SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA","sentence":"^\\QFinally we can begin coding ourselves.\\E$"}
{"rule":"PASSED_PAST","sentence":"^\\QThis gets passed up to the base class as the payload, and we also ensure we tell the base class the action is of type \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"MASS_AGREEMENT","sentence":"^\\QPacket structure The Chatbox scene should take up the bottom third of the screen as indicated by the faint blue line.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_AU","sentence":"^\\QRight-click the root node and select Attach Script, leave the path as default (res://Chatbox.gd) and click Create.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_AU","sentence":"^\\QIn Godot, open the Main.gd script and add a reference to the Chatbox node just between the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q declarations:\\E$"}
{"rule":"COMMA_COMPOUND_SENTENCE","sentence":"^\\QNow we just need to tell the client how to receive and process new messages and we're done!\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QGodot's \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q keyword works like a switch statement in other languages, or an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q chain in Python.\\E$"}
{"rule":"PUNCTUATION_PARAGRAPH_END","sentence":"^\\QTabs to spaces\\E$"}
{"rule":"TOO_LONG_SENTENCE","sentence":"^\\QI found the easiest way to run multiple instances of our game is actually to export to HTML5, and then you will have access to another button at the top-right where you can launch an instance of your game from a web browser.\\E$"}
{"rule":"COMMA_COMPOUND_SENTENCE","sentence":"^\\QThen you can close the Export window and you'll see a new button at the top-right which will run the exported HTML5 project in your browser.\\E$"}
{"rule":"EXTREME_ADJECTIVES","sentence":"^\\QYou can do this while the Desktop version of your game is running too, so you can get a really good test of the chatbox.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QYou should be able to type something and see it appear in the other clients' chatlogs.\\E$"}
{"rule":"POSSESSIVE_APOSTROPHE","sentence":"^\\QIf do you want to start here without viewing the previous lesson, however, you can visit the Releases section of the official GitHub repository, and download the End of lesson 1 code by expanding Assets and downloading Source code (zip).\\E$"}
{"rule":"PUNCTUATION_PARAGRAPH_END","sentence":"^\\QYour server directory should look like this now:\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+$"}
{"rule":"PUNCTUATION_PARAGRAPH_END","sentence":"^\\QLet's add four more:\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+$"}
{"rule":"LOG_IN","sentence":"^\\QAdding the Login state\nIt's time to add a new state to our protocol, which handles packets only related to login or registration.\\E$"}
{"rule":"COMMA_COMPOUND_SENTENCE","sentence":"^\\QStart by heading over to \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and add a new import at the top of the file so we can use our new User model:\\E$"}
{"rule":"TOO_LONG_SENTENCE","sentence":"^\\QThe last thing we need to do is to make the protocol be in the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q state as soon as it opens, since logging in or registering is the first thing the client will be trying to do when it connects.\\E$"}
{"rule":"COMMA_COMPOUND_SENTENCE","sentence":"^\\QIt's important to test your program every chance you get for errors so they don't build up too much.\\E$"}
{"rule":"PUNCTUATION_PARAGRAPH_END","sentence":"^\\QThen add the following child nodes until your scene tree looks like this:\nControl\nCanvasLayer\nVBoxContainer\nGridContainer\nLabel\nLineEdit\nLabel2\nLineEdit2\nCenterContainer\nHBoxContainer\nButton\nButton2\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_RULE","sentence":"^\\QControl Login\nLabel Label_Username\nLineEdit LineEdit_Username\nLabel2 Label_Password\nLineEdit2 LineEdit_Password\nButton Button_Login\nButton2 Button_Register\\E$"}
{"rule":"WORD_CONTAINS_UNDERSCORE","sentence":"^\\QControl Login\nLabel Label_Username\nLineEdit LineEdit_Username\nLabel2 Label_Password\nLineEdit2 LineEdit_Password\nButton Button_Login\nButton2 Button_Register\\E$"}
{"rule":"WORD_CONTAINS_UNDERSCORE","sentence":"^\\Q|Node|Text property| |--|--| |Label_Username|Username: | |Label_Password|Password: | |Button_Login|Login| |Button_Register|Register|\\E$"}
{"rule":"POSSESSIVE_APOSTROPHE","sentence":"^\\QFinally, select the GridContainer and change the Columns property to 2.\\E$"}
{"rule":"COMMA_COMPOUND_SENTENCE","sentence":"^\\QSince we removed the Chatbox node, we will need a way to instance it again in code, so add this import and we will use it later:\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QWe change the (not yet defined) \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q/\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q states so that, when the server sends back an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q or \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q packet, we will be expecting them and know what to do with them.\\E$"}
{"rule":"COMMA_COMPOUND_SENTENCE","sentence":"^\\QNext, let's go back to Godot, open \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and let the client hold on to its username so we can send it later.\\E$"}
{"rule":"PUNCTUATION_PARAGRAPH_END","sentence":"^\\QYour scene tree should now look like this:\nMain\nChatbox\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QYou should be able to type something and see it appear in the other clients' chat logs.\\E$"}
{"rule":"POSSESSIVE_APOSTROPHE","sentence":"^\\QIf do you want to start here without viewing the previous lessons, however, you can visit the Releases section of the official GitHub repository, and download the End of lesson 2 code by expanding Assets and downloading Source code (zip).\\E$"}
{"rule":"PUNCTUATION_PARAGRAPH_END","sentence":"^\\QBut this loot might not exist properly in the world so doesn't need a position: Loot\\E$"}
{"rule":"COMMA_COMPOUND_SENTENCE","sentence":"^\\QFixing the login and register logic\nNow that we've re-defined our short-term goals, we need more than just a User when we register, so change the registration logic so we do the following just after we save the user to the database, but just before we send the Ok packet back to the client.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QFor that, we need to have an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q statement for each \"composite\" model in our game (e.g. \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is a \"composite\" model because it is made up of an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and a \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q).\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QFor that, we need to have an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q statement for each \"composite\" model in our game (e.g., \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is a \"composite\" model because it is made up of an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and a \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q).\\E$"}
{"rule":"PUNCTUATION_PARAGRAPH_END","sentence":"^\\QTo this scene, add a Node2D root, rename it to Actor, and add the following other nodes until your scene tree looks like this:\nActor\nKinematicBody2D\nLabel\nSprite\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QWe can see from the first line, this script extends from \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, so will have access to an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q function.\\E$"}
{"rule":"SOME_OF_THE","sentence":"^\\QWe are also overriding the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q function, to additionally interpret some of the information in the model like the position and the actor's name.\\E$"}
{"rule":"COMMA_COMPOUND_SENTENCE","sentence":"^\\QFor now, just add this to the top of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and we will define it later:\\E$"}
{"rule":"COMMA_COMPOUND_SENTENCE","sentence":"^\\QCreate a new file in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q called \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q which will serve as a place to throw all our random static functions in so they don't clutter our more important logic in other files:\\E$"}
{"rule":"WHETHER","sentence":"^\\QWe can take advantage of this to decide whether or not we should re-broadcast our actor's model later.\\E$"}
{"rule":"TOO_LONG_SENTENCE","sentence":"^\\QIf any of this doesn't work for you, and you've checked the server output, Godot's debug log, and still can't figure it out, I would recommend downloading the official source code for the game up to the end of this lesson and comparing your own code against it.\\E$"}
{"rule":"LC_AFTER_PERIOD","sentence":"^\\QA hint is to use Django's model.save function somewhere in this code!\\E$"}
{"rule":"COMMA_COMPOUND_SENTENCE","sentence":"^\\QThis does cause them to send us their model a second time, but by then, they will be known to us so we don't get stuck in an infinite loop.\\E$"}
{"rule":"POSSESSIVE_APOSTROPHE","sentence":"^\\QAs always, you can visit the Releases section of the official GitHub repository, and download the End of lesson 4 code by expanding Assets and downloading Source code (zip).\\E$"}
{"rule":"COMMA_COMPOUND_SENTENCE","sentence":"^\\QClick the Animation Looping icon so we can see a good preview of our animation.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_AU","sentence":"^\\QIn Godot, angles are measured in Radians by default, starting at \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q$ on the positive \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\\pi\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-\\pi$$.\\E$"}
{"rule":"COMMA_COMPOUND_SENTENCE","sentence":"^\\QChange the region back to the first guy (this will help keep a future calculation simple), and let's also make a copy of our Sprite and AnimationPlayer nodes so we can use them elsewhere.\\E$"}
