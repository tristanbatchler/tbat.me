{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QIntroducing \"Radius Rumble\"\nFor this series, we'll develop Radius Rumble, a Godot-4-and-Golang-powered clone of the popular game agar.io.\\E$"}
{"rule":"A_INSTALL","sentence":"^\\QIf you see an error saying \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is not installed, you can simply press the Install button that appears in the error message.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QAs for the messages we have defined to start with, we have a \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q for sending chat messages, a \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q for when the server denies a request, and an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q for when the server sends a client its ID.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QAs for the messages we have defined to start with, we have a \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q for sending chat messages, and an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q for when the server sends a client its ID.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QThe only import we need is \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q for the mutex, and we will make it part of an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q package.\\E$"}
{"rule":"SAVE_SAFE","sentence":"^\\QThe reason for this is simple: I never found a reason to need an accurate number of objects in a shared collection at any point, so I figured we may as well save the performance hit of locking the map.\\E$"}
{"rule":"A_INFINITIVE","sentence":"^\\QSo let's go ahead and register our new script as an autoload.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QThe \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q line is similar, but this time it is an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q query that will insert a new row into the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q table.\\E$"}
{"rule":"ID_CASING","sentence":"^\\QThis piece of SQL code will create a table in our database called \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, which will have this structure: | Column Name | Data Type | Description | | --- | --- | --- | | id | int | A unique identifier for the user | | username | string | The username of the user | | password_hash | string | An obfuscated version of the user's password |\\E$"}
{"rule":"BEEN_PART_AGREEMENT","sentence":"^\\QWhat we can do now, however, is create our database and start interacting with it by calling the supplied functions in the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q package.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QWe will do all that in our \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q state, and upon successful login or registration, we can transfer them to an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q state, which we will create in the next post.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QAdd the following nodes underneath the root \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q node:\nCanvasLayer - called \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nVBoxContainer\nLineEdit - called \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nLineEdit - called \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nHBoxContainer\nButton - called \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q with the text \"Login\"\nButton - called \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q with the text \"Register\"\nLog (log.gd)\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QThe \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q variable is a callback function for when the server sends an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"LOT_OF","sentence":"^\\QThere is quite a lot happening here, so let's break it down:\\E$"}
